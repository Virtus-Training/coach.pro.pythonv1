"""
Page nutritionnelle moderne avec interface inspir√©e des meilleures apps
Int√®gre recherche avanc√©e, g√©n√©ration intelligente et analyses nutritionnelles
"""

import customtkinter as ctk
from typing import Dict, List, Optional, Callable
from tkinter import messagebox
import tkinter as tk
from datetime import datetime

from services.meal_plan_generator_service import MealPlanGeneratorService
from services.food_search_service import FoodSearchService, FiltreRecherche, TriAliment\nfrom models.aliment import Aliment\nfrom models.profil_nutritionnel import ProfilNutritionnel\nfrom repositories.profil_nutritionnel_repo import ProfilNutritionnelRepository\nfrom repositories.aliment_repo import AlimentRepository\nfrom ui.components.design_system import Card, CardTitle, PrimaryButton, SecondaryButton\n\n\nclass ModernNutritionPage(ctk.CTkFrame):\n    \"\"\"Interface nutritionnelle moderne avec fonctionnalit√©s avanc√©es\"\"\"\n    \n    def __init__(self, parent, client_id: int):\n        super().__init__(parent)\n        \n        self.client_id = client_id\n        \n        # Services\n        self.meal_generator = MealPlanGeneratorService()\n        self.food_search = FoodSearchService()\n        self.profil_repo = ProfilNutritionnelRepository()\n        self.aliment_repo = AlimentRepository()\n        \n        # √âtat de l'interface\n        self.current_profile: Optional[ProfilNutritionnel] = None\n        self.current_plan = None\n        self.selected_meal_index = 0\n        \n        # Configuration de la grille\n        self.grid_rowconfigure(0, weight=0)  # Header\n        self.grid_rowconfigure(1, weight=1)  # Content\n        self.grid_columnconfigure(0, weight=1, minsize=300)  # Sidebar\n        self.grid_columnconfigure(1, weight=2, minsize=400)  # Main\n        self.grid_columnconfigure(2, weight=1, minsize=300)  # Search\n        \n        self._setup_ui()\n        self._load_data()\n    \n    def _setup_ui(self):\n        \"\"\"Configure l'interface utilisateur\"\"\"\n        \n        # Header avec actions principales\n        self._create_header()\n        \n        # Panneau de gauche: Profil + Objectifs\n        self._create_profile_panel()\n        \n        # Panneau central: Plan alimentaire\n        self._create_meal_plan_panel()\n        \n        # Panneau de droite: Recherche + Suggestions\n        self._create_search_panel()\n    \n    def _create_header(self):\n        \"\"\"Cr√©e l'en-t√™te avec les actions principales\"\"\"\n        \n        header = ctk.CTkFrame(self, height=80)\n        header.grid(row=0, column=0, columnspan=3, sticky=\"ew\", padx=10, pady=(10, 0))\n        header.grid_columnconfigure(1, weight=1)\n        \n        # Titre\n        title_frame = ctk.CTkFrame(header, fg_color=\"transparent\")\n        title_frame.grid(row=0, column=0, sticky=\"w\", padx=20, pady=10)\n        \n        ctk.CTkLabel(\n            title_frame, \n            text=\"üçé Nutrition Intelligente\", \n            font=ctk.CTkFont(size=24, weight=\"bold\")\n        ).pack(anchor=\"w\")\n        \n        ctk.CTkLabel(\n            title_frame, \n            text=\"G√©n√©ration automatique de plans alimentaires personnalis√©s\",\n            font=ctk.CTkFont(size=14),\n            text_color=(\"gray60\", \"gray40\")\n        ).pack(anchor=\"w\")\n        \n        # Actions principales\n        actions_frame = ctk.CTkFrame(header, fg_color=\"transparent\")\n        actions_frame.grid(row=0, column=2, sticky=\"e\", padx=20, pady=10)\n        \n        PrimaryButton(\n            actions_frame,\n            text=\"ü§ñ G√©n√©rer Plan Auto\",\n            command=self._generate_automatic_plan,\n            width=180\n        ).pack(side=\"right\", padx=(0, 10))\n        \n        SecondaryButton(\n            actions_frame,\n            text=\"‚öôÔ∏è Configurer Profil\",\n            command=self._open_profile_config,\n            width=160\n        ).pack(side=\"right\", padx=(0, 10))\n    \n    def _create_profile_panel(self):\n        \"\"\"Cr√©e le panneau de profil et objectifs nutritionnels\"\"\"\n        \n        self.profile_frame = ctk.CTkFrame(self)\n        self.profile_frame.grid(row=1, column=0, sticky=\"nsew\", padx=(10, 5), pady=10)\n        \n        # Titre du profil\n        profile_header = ctk.CTkFrame(self.profile_frame, fg_color=\"transparent\")\n        profile_header.pack(fill=\"x\", padx=15, pady=15)\n        \n        ctk.CTkLabel(\n            profile_header,\n            text=\"üë§ Profil Nutritionnel\",\n            font=ctk.CTkFont(size=18, weight=\"bold\")\n        ).pack(anchor=\"w\")\n        \n        # Informations du profil\n        self.profile_info_frame = ctk.CTkFrame(self.profile_frame)\n        self.profile_info_frame.pack(fill=\"x\", padx=15, pady=(0, 15))\n        \n        # Objectifs macronutriments\n        objectives_header = ctk.CTkFrame(self.profile_frame, fg_color=\"transparent\")\n        objectives_header.pack(fill=\"x\", padx=15, pady=(15, 10))\n        \n        ctk.CTkLabel(\n            objectives_header,\n            text=\"üéØ Objectifs Journaliers\",\n            font=ctk.CTkFont(size=16, weight=\"bold\")\n        ).pack(anchor=\"w\")\n        \n        # Barres de progression\n        self.objectives_frame = ctk.CTkFrame(self.profile_frame)\n        self.objectives_frame.pack(fill=\"x\", padx=15, pady=(0, 15))\n        \n        # Recommandations intelligentes\n        recommendations_header = ctk.CTkFrame(self.profile_frame, fg_color=\"transparent\")\n        recommendations_header.pack(fill=\"x\", padx=15, pady=(15, 10))\n        \n        ctk.CTkLabel(\n            recommendations_header,\n            text=\"üí° Recommandations\",\n            font=ctk.CTkFont(size=16, weight=\"bold\")\n        ).pack(anchor=\"w\")\n        \n        self.recommendations_frame = ctk.CTkFrame(self.profile_frame)\n        self.recommendations_frame.pack(fill=\"both\", expand=True, padx=15, pady=(0, 15))\n    \n    def _create_meal_plan_panel(self):\n        \"\"\"Cr√©e le panneau principal du plan alimentaire\"\"\"\n        \n        main_frame = ctk.CTkFrame(self)\n        main_frame.grid(row=1, column=1, sticky=\"nsew\", padx=5, pady=10)\n        main_frame.grid_rowconfigure(1, weight=1)\n        \n        # En-t√™te du plan\n        plan_header = ctk.CTkFrame(main_frame, fg_color=\"transparent\")\n        plan_header.pack(fill=\"x\", padx=20, pady=15)\n        \n        ctk.CTkLabel(\n            plan_header,\n            text=\"üçΩÔ∏è Plan Alimentaire Personnalis√©\",\n            font=ctk.CTkFont(size=18, weight=\"bold\")\n        ).pack(anchor=\"w\")\n        \n        # Actions du plan\n        plan_actions = ctk.CTkFrame(plan_header, fg_color=\"transparent\")\n        plan_actions.pack(fill=\"x\", pady=(10, 0))\n        \n        SecondaryButton(\n            plan_actions,\n            text=\"üìä Analyser\",\n            command=self._analyze_current_plan,\n            width=100\n        ).pack(side=\"left\", padx=(0, 10))\n        \n        SecondaryButton(\n            plan_actions,\n            text=\"üîÑ Optimiser\",\n            command=self._optimize_current_plan,\n            width=100\n        ).pack(side=\"left\", padx=(0, 10))\n        \n        SecondaryButton(\n            plan_actions,\n            text=\"üìÑ Exporter PDF\",\n            command=self._export_plan_pdf,\n            width=120\n        ).pack(side=\"right\")\n        \n        # Zone de contenu scrollable\n        self.meal_content_frame = ctk.CTkScrollableFrame(main_frame)\n        self.meal_content_frame.pack(fill=\"both\", expand=True, padx=20, pady=(0, 15))\n        \n        # Message de bienvenue par d√©faut\n        self._show_welcome_message()\n    \n    def _create_search_panel(self):\n        \"\"\"Cr√©e le panneau de recherche avanc√©e\"\"\"\n        \n        search_frame = ctk.CTkFrame(self)\n        search_frame.grid(row=1, column=2, sticky=\"nsew\", padx=(5, 10), pady=10)\n        \n        # En-t√™te de recherche\n        search_header = ctk.CTkFrame(search_frame, fg_color=\"transparent\")\n        search_header.pack(fill=\"x\", padx=15, pady=15)\n        \n        ctk.CTkLabel(\n            search_header,\n            text=\"üîç Recherche Intelligente\",\n            font=ctk.CTkFont(size=18, weight=\"bold\")\n        ).pack(anchor=\"w\")\n        \n        # Barre de recherche principale\n        search_input_frame = ctk.CTkFrame(search_frame)\n        search_input_frame.pack(fill=\"x\", padx=15, pady=(0, 15))\n        \n        self.search_var = ctk.StringVar()\n        self.search_var.trace(\"w\", self._on_search_change)\n        \n        self.search_entry = ctk.CTkEntry(\n            search_input_frame,\n            textvariable=self.search_var,\n            placeholder_text=\"Rechercher un aliment...\",\n            font=ctk.CTkFont(size=14)\n        )\n        self.search_entry.pack(fill=\"x\", padx=10, pady=10)\n        \n        # Filtres avanc√©s\n        self._create_advanced_filters(search_frame)\n        \n        # R√©sultats de recherche\n        results_header = ctk.CTkFrame(search_frame, fg_color=\"transparent\")\n        results_header.pack(fill=\"x\", padx=15, pady=(15, 5))\n        \n        ctk.CTkLabel(\n            results_header,\n            text=\"R√©sultats\",\n            font=ctk.CTkFont(size=16, weight=\"bold\")\n        ).pack(anchor=\"w\")\n        \n        # Zone de r√©sultats scrollable\n        self.results_frame = ctk.CTkScrollableFrame(search_frame, height=200)\n        self.results_frame.pack(fill=\"both\", expand=True, padx=15, pady=(5, 15))\n        \n        # Suggestions intelligentes\n        self._create_smart_suggestions(search_frame)\n    \n    def _create_advanced_filters(self, parent):\n        \"\"\"Cr√©e les filtres avanc√©s de recherche\"\"\"\n        \n        filters_frame = ctk.CTkFrame(parent)\n        filters_frame.pack(fill=\"x\", padx=15, pady=(0, 15))\n        \n        # Titre des filtres\n        ctk.CTkLabel(\n            filters_frame,\n            text=\"Filtres\",\n            font=ctk.CTkFont(size=14, weight=\"bold\")\n        ).pack(anchor=\"w\", padx=10, pady=(10, 5))\n        \n        # Filtre par cat√©gorie\n        ctk.CTkLabel(filters_frame, text=\"Cat√©gorie:\").pack(anchor=\"w\", padx=10, pady=(5, 0))\n        \n        self.category_var = ctk.StringVar(value=\"Toutes\")\n        self.category_menu = ctk.CTkOptionMenu(\n            filters_frame,\n            variable=self.category_var,\n            values=[\"Toutes\", \"L√©gumes\", \"Fruits\", \"Viandes\", \"Poissons\", \"C√©r√©ales\", \"L√©gumineuses\"],\n            command=self._on_filter_change\n        )\n        self.category_menu.pack(fill=\"x\", padx=10, pady=(5, 10))\n        \n        # Filtre par objectif nutritionnel\n        ctk.CTkLabel(filters_frame, text=\"Objectif:\").pack(anchor=\"w\", padx=10, pady=(5, 0))\n        \n        self.objective_var = ctk.StringVar(value=\"Tous\")\n        self.objective_menu = ctk.CTkOptionMenu(\n            filters_frame,\n            variable=self.objective_var,\n            values=[\"Tous\", \"Riche en prot√©ines\", \"Faible en calories\", \"Riche en fibres\", \"√âquilibr√©\"],\n            command=self._on_filter_change\n        )\n        self.objective_menu.pack(fill=\"x\", padx=10, pady=(5, 10))\n        \n        # Toggle pour compatibilit√© r√©gime\n        self.regime_compatible = ctk.BooleanVar(value=True)\n        self.regime_checkbox = ctk.CTkCheckBox(\n            filters_frame,\n            text=\"Compatible avec mon r√©gime\",\n            variable=self.regime_compatible,\n            command=self._on_filter_change\n        )\n        self.regime_checkbox.pack(anchor=\"w\", padx=10, pady=5)\n    \n    def _create_smart_suggestions(self, parent):\n        \"\"\"Cr√©e la zone de suggestions intelligentes\"\"\"\n        \n        suggestions_frame = ctk.CTkFrame(parent)\n        suggestions_frame.pack(fill=\"x\", padx=15, pady=(0, 15))\n        \n        ctk.CTkLabel(\n            suggestions_frame,\n            text=\"üí° Suggestions pour vous\",\n            font=ctk.CTkFont(size=14, weight=\"bold\")\n        ).pack(anchor=\"w\", padx=10, pady=(10, 5))\n        \n        self.suggestions_content = ctk.CTkFrame(suggestions_frame)\n        self.suggestions_content.pack(fill=\"x\", padx=10, pady=(5, 10))\n        \n        # Chargement des suggestions par d√©faut\n        self._load_smart_suggestions()\n    \n    def _load_data(self):\n        \"\"\"Charge les donn√©es initiales\"\"\"\n        \n        try:\n            # Chargement du profil nutritionnel\n            self.current_profile = self.profil_repo.get_by_client_id(self.client_id)\n            \n            if not self.current_profile:\n                self._show_profile_setup_needed()\n                return\n            \n            # Mise √† jour de l'interface avec les donn√©es du profil\n            self._update_profile_display()\n            self._load_smart_suggestions()\n            \n        except Exception as e:\n            print(f\"Erreur lors du chargement des donn√©es: {e}\")\n            messagebox.showerror(\"Erreur\", f\"Impossible de charger les donn√©es: {e}\")\n    \n    def _show_welcome_message(self):\n        \"\"\"Affiche le message de bienvenue\"\"\"\n        \n        welcome_frame = ctk.CTkFrame(self.meal_content_frame, fg_color=\"transparent\")\n        welcome_frame.pack(fill=\"both\", expand=True, padx=20, pady=50)\n        \n        ctk.CTkLabel(\n            welcome_frame,\n            text=\"üåü Bienvenue dans votre espace nutritionnel personnalis√© !\",\n            font=ctk.CTkFont(size=20, weight=\"bold\")\n        ).pack(pady=20)\n        \n        ctk.CTkLabel(\n            welcome_frame,\n            text=\"Pour commencer, configurez votre profil nutritionnel ou\\ng√©n√©rez automatiquement un plan alimentaire.\",\n            font=ctk.CTkFont(size=14),\n            justify=\"center\"\n        ).pack(pady=10)\n        \n        actions_frame = ctk.CTkFrame(welcome_frame, fg_color=\"transparent\")\n        actions_frame.pack(pady=30)\n        \n        PrimaryButton(\n            actions_frame,\n            text=\"ü§ñ G√©n√©rer mon premier plan\",\n            command=self._generate_automatic_plan,\n            width=250,\n            height=50\n        ).pack(pady=10)\n        \n        SecondaryButton(\n            actions_frame,\n            text=\"‚öôÔ∏è Configurer mon profil\",\n            command=self._open_profile_config,\n            width=200,\n            height=40\n        ).pack()\n    \n    def _show_profile_setup_needed(self):\n        \"\"\"Affiche l'interface de configuration de profil n√©cessaire\"\"\"\n        \n        setup_frame = ctk.CTkFrame(self.profile_info_frame, fg_color=(\"orange\", \"dark_orange\"))\n        setup_frame.pack(fill=\"both\", expand=True, padx=10, pady=10)\n        \n        ctk.CTkLabel(\n            setup_frame,\n            text=\"‚ö†Ô∏è Configuration Requise\",\n            font=ctk.CTkFont(size=16, weight=\"bold\")\n        ).pack(pady=(15, 5))\n        \n        ctk.CTkLabel(\n            setup_frame,\n            text=\"Cr√©ez votre profil nutritionnel\\npour des recommandations personnalis√©es\",\n            justify=\"center\"\n        ).pack(pady=5)\n        \n        PrimaryButton(\n            setup_frame,\n            text=\"Configurer maintenant\",\n            command=self._open_profile_config,\n            width=180\n        ).pack(pady=(10, 15))\n    \n    def _update_profile_display(self):\n        \"\"\"Met √† jour l'affichage du profil\"\"\"\n        \n        if not self.current_profile:\n            return\n        \n        # Nettoyage du frame existant\n        for widget in self.profile_info_frame.winfo_children():\n            widget.destroy()\n        \n        # Informations de base\n        info_text = f\"\"\"üë§ {self.current_profile.age} ans, {self.current_profile.sexe}\nüéØ {self.current_profile.objectif_principal}\n‚ö° {self.current_profile.niveau_activite}\nüî• {int(self.current_profile.besoins_caloriques or 0)} kcal/jour\"\"\"\n        \n        ctk.CTkLabel(\n            self.profile_info_frame,\n            text=info_text,\n            justify=\"left\",\n            font=ctk.CTkFont(size=12)\n        ).pack(anchor=\"w\", padx=10, pady=10)\n        \n        self._update_objectives_display()\n    \n    def _update_objectives_display(self):\n        \"\"\"Met √† jour l'affichage des objectifs avec barres de progression\"\"\"\n        \n        if not self.current_profile or not self.current_profile.repartition_macros:\n            return\n        \n        # Nettoyage du frame existant\n        for widget in self.objectives_frame.winfo_children():\n            widget.destroy()\n        \n        macros = self.current_profile.repartition_macros\n        \n        # Cr√©ation des barres de progression pour chaque macro\n        objectives = [\n            (\"Calories\", int(self.current_profile.besoins_caloriques or 0), 0, \"kcal\"),\n            (\"Prot√©ines\", int(macros.get(\"proteines_g\", 0)), 0, \"g\"),\n            (\"Glucides\", int(macros.get(\"glucides_g\", 0)), 0, \"g\"),\n            (\"Lipides\", int(macros.get(\"lipides_g\", 0)), 0, \"g\")\n        ]\n        \n        for name, target, current, unit in objectives:\n            self._create_progress_bar(self.objectives_frame, name, target, current, unit)\n    \n    def _create_progress_bar(self, parent, name: str, target: int, current: int, unit: str):\n        \"\"\"Cr√©e une barre de progression pour un objectif nutritionnel\"\"\"\n        \n        bar_frame = ctk.CTkFrame(parent)\n        bar_frame.pack(fill=\"x\", padx=10, pady=5)\n        \n        # Label avec nom et valeurs\n        label_text = f\"{name}: {current} / {target} {unit}\"\n        ctk.CTkLabel(bar_frame, text=label_text, font=ctk.CTkFont(size=12)).pack(anchor=\"w\", padx=10, pady=(5, 0))\n        \n        # Barre de progression\n        progress = min(1.0, current / target if target > 0 else 0)\n        \n        progress_bar = ctk.CTkProgressBar(bar_frame, width=200, height=8)\n        progress_bar.set(progress)\n        progress_bar.pack(fill=\"x\", padx=10, pady=(2, 8))\n    \n    def _load_smart_suggestions(self):\n        \"\"\"Charge les suggestions intelligentes bas√©es sur le profil\"\"\"\n        \n        # Nettoyage du frame existant\n        for widget in self.suggestions_content.winfo_children():\n            widget.destroy()\n        \n        if not self.current_profile:\n            ctk.CTkLabel(\n                self.suggestions_content,\n                text=\"Configurez votre profil pour\\ndes suggestions personnalis√©es\",\n                justify=\"center\"\n            ).pack(pady=10)\n            return\n        \n        # Obtention des top aliments selon l'objectif\n        try:\n            if \"perte\" in self.current_profile.objectif_principal.lower():\n                # Aliments faibles en calories, riches en fibres\n                suggestions = self.food_search.obtenir_top_aliments(\n                    critere=\"fibres_100g\", \n                    limit=5, \n                    exclude_categories=[\"Sucres et produits sucr√©s\"]\n                )\n                suggestion_title = \"üåø Parfait pour la perte de poids\"\n            \n            elif \"muscle\" in self.current_profile.objectif_principal.lower():\n                # Aliments riches en prot√©ines\n                suggestions = self.food_search.obtenir_top_aliments(\n                    critere=\"proteines_100g\", \n                    limit=5\n                )\n                suggestion_title = \"üí™ Excellent pour la prise de muscle\"\n            \n            else:\n                # Aliments √©quilibr√©s avec bon score healthy\n                suggestions = self.food_search.obtenir_top_aliments(\n                    critere=\"indice_healthy\", \n                    limit=5\n                )\n                suggestion_title = \"‚≠ê Recommand√©s pour vous\"\n            \n            # Affichage du titre\n            ctk.CTkLabel(\n                self.suggestions_content,\n                text=suggestion_title,\n                font=ctk.CTkFont(size=12, weight=\"bold\")\n            ).pack(anchor=\"w\", padx=5, pady=(5, 10))\n            \n            # Affichage des suggestions\n            for aliment in suggestions[:3]:  # Top 3 seulement\n                self._create_suggestion_item(aliment)\n                \n        except Exception as e:\n            print(f\"Erreur lors du chargement des suggestions: {e}\")\n            ctk.CTkLabel(\n                self.suggestions_content,\n                text=\"Suggestions indisponibles\"\n            ).pack(pady=10)\n    \n    def _create_suggestion_item(self, aliment: Aliment):\n        \"\"\"Cr√©e un √©l√©ment de suggestion\"\"\"\n        \n        item_frame = ctk.CTkFrame(self.suggestions_content, fg_color=(\"gray85\", \"gray20\"))\n        item_frame.pack(fill=\"x\", padx=5, pady=2)\n        \n        # Nom de l'aliment\n        name_label = ctk.CTkLabel(\n            item_frame,\n            text=aliment.nom[:20] + (\"...\" if len(aliment.nom) > 20 else \"\"),\n            font=ctk.CTkFont(size=11, weight=\"bold\")\n        )\n        name_label.pack(anchor=\"w\", padx=8, pady=(5, 0))\n        \n        # Informations nutritionnelles cl√©s\n        info_text = f\"{aliment.kcal_100g:.0f} kcal | {aliment.proteines_100g:.1f}g prot\"\n        ctk.CTkLabel(\n            item_frame,\n            text=info_text,\n            font=ctk.CTkFont(size=10),\n            text_color=(\"gray60\", \"gray50\")\n        ).pack(anchor=\"w\", padx=8, pady=(0, 5))\n        \n        # Clic pour ajouter\n        item_frame.bind(\"<Button-1>\", lambda e: self._add_suggested_food(aliment))\n        name_label.bind(\"<Button-1>\", lambda e: self._add_suggested_food(aliment))\n    \n    def _on_search_change(self, *args):\n        \"\"\"D√©clench√© lors de la modification de la recherche\"\"\"\n        \n        query = self.search_var.get().strip()\n        \n        if len(query) < 2:\n            self._clear_search_results()\n            return\n        \n        # Recherche avec d√©lai pour √©viter trop de requ√™tes\n        self.after_cancel(getattr(self, '_search_job', None))\n        self._search_job = self.after(300, lambda: self._perform_search(query))\n    \n    def _perform_search(self, query: str):\n        \"\"\"Effectue la recherche d'aliments\"\"\"\n        \n        try:\n            # Construction du filtre bas√© sur l'UI\n            filtre = FiltreRecherche(\n                nom=query,\n                categories=None if self.category_var.get() == \"Toutes\" else [self.category_var.get()],\n                limit=10\n            )\n            \n            # Ajustement du filtre selon l'objectif s√©lectionn√©\n            objective = self.objective_var.get()\n            if objective == \"Riche en prot√©ines\":\n                filtre.proteines_min = 15.0\n            elif objective == \"Faible en calories\":\n                filtre.kcal_max = 150.0\n            elif objective == \"Riche en fibres\":\n                filtre.fibres_min = 5.0\n            \n            # Application du filtre de compatibilit√© r√©gime\n            if self.regime_compatible.get() and self.current_profile:\n                filtre.regimes_compatibles = self.current_profile.regimes_compatibles\n                filtre.aliments_exclus = self.current_profile.aliments_exclus\n            \n            # Ex√©cution de la recherche\n            if self.current_profile:\n                resultat = self.food_search.recherche_pour_profil(query, self.client_id)\n            else:\n                resultat = self.food_search.recherche_avancee(filtre)\n            \n            self._display_search_results(resultat.aliments)\n            \n        except Exception as e:\n            print(f\"Erreur de recherche: {e}\")\n            self._clear_search_results()\n    \n    def _display_search_results(self, aliments: List[Aliment]):\n        \"\"\"Affiche les r√©sultats de recherche\"\"\"\n        \n        # Nettoyage des r√©sultats existants\n        for widget in self.results_frame.winfo_children():\n            widget.destroy()\n        \n        if not aliments:\n            ctk.CTkLabel(\n                self.results_frame,\n                text=\"Aucun r√©sultat trouv√©.\\nEssayez d'√©largir vos crit√®res.\",\n                justify=\"center\",\n                text_color=(\"gray60\", \"gray50\")\n            ).pack(pady=20)\n            return\n        \n        # Affichage des r√©sultats\n        for aliment in aliments:\n            self._create_search_result_item(aliment)\n    \n    def _create_search_result_item(self, aliment: Aliment):\n        \"\"\"Cr√©e un √©l√©ment de r√©sultat de recherche\"\"\"\n        \n        item_frame = ctk.CTkFrame(self.results_frame)\n        item_frame.pack(fill=\"x\", padx=5, pady=3)\n        \n        # Configuration du layout\n        item_frame.grid_columnconfigure(0, weight=1)\n        \n        # Nom et cat√©gorie\n        name_frame = ctk.CTkFrame(item_frame, fg_color=\"transparent\")\n        name_frame.grid(row=0, column=0, sticky=\"ew\", padx=10, pady=(8, 2))\n        \n        ctk.CTkLabel(\n            name_frame,\n            text=aliment.nom,\n            font=ctk.CTkFont(size=12, weight=\"bold\")\n        ).pack(anchor=\"w\")\n        \n        if aliment.categorie:\n            ctk.CTkLabel(\n                name_frame,\n                text=aliment.categorie,\n                font=ctk.CTkFont(size=10),\n                text_color=(\"gray60\", \"gray50\")\n            ).pack(anchor=\"w\")\n        \n        # Informations nutritionnelles\n        nutrition_frame = ctk.CTkFrame(item_frame, fg_color=\"transparent\")\n        nutrition_frame.grid(row=1, column=0, sticky=\"ew\", padx=10, pady=(0, 2))\n        \n        nutrition_text = f\"üî• {aliment.kcal_100g:.0f} kcal | ü•© {aliment.proteines_100g:.1f}g | üåæ {aliment.glucides_100g:.1f}g | üßà {aliment.lipides_100g:.1f}g\"\n        ctk.CTkLabel(\n            nutrition_frame,\n            text=nutrition_text,\n            font=ctk.CTkFont(size=9),\n            text_color=(\"gray70\", \"gray40\")\n        ).pack(anchor=\"w\")\n        \n        # Score de qualit√© nutritionnelle\n        if aliment.indice_healthy:\n            score_text = f\"‚≠ê Score sant√©: {aliment.indice_healthy}/10\"\n            ctk.CTkLabel(\n                nutrition_frame,\n                text=score_text,\n                font=ctk.CTkFont(size=9),\n                text_color=(\"green\", \"light_green\")\n            ).pack(anchor=\"w\")\n        \n        # Bouton d'ajout\n        add_btn = ctk.CTkButton(\n            item_frame,\n            text=\"+ Ajouter\",\n            width=80,\n            height=28,\n            font=ctk.CTkFont(size=10),\n            command=lambda: self._add_food_to_meal(aliment)\n        )\n        add_btn.grid(row=0, rowspan=2, column=1, padx=(5, 10), pady=8)\n    \n    def _clear_search_results(self):\n        \"\"\"Vide les r√©sultats de recherche\"\"\"\n        for widget in self.results_frame.winfo_children():\n            widget.destroy()\n    \n    def _on_filter_change(self, *args):\n        \"\"\"D√©clench√© lors du changement de filtres\"\"\"\n        # Relancer la recherche si il y a une query active\n        if len(self.search_var.get().strip()) >= 2:\n            self._perform_search(self.search_var.get().strip())\n    \n    # Actions principales\n    \n    def _generate_automatic_plan(self):\n        \"\"\"G√©n√®re automatiquement un plan alimentaire\"\"\"\n        \n        if not self.current_profile:\n            messagebox.showwarning(\n                \"Profil requis\", \n                \"Veuillez d'abord configurer votre profil nutritionnel.\"\n            )\n            self._open_profile_config()\n            return\n        \n        try:\n            # G√©n√©ration du plan\n            plan = self.meal_generator.generer_plan_automatique(\n                client_id=self.client_id,\n                duree_jours=1,  # Plan d'une journ√©e pour commencer\n                nom_plan=f\"Plan auto {datetime.now().strftime('%d/%m')}\"\n            )\n            \n            self.current_plan = plan\n            self._display_meal_plan(plan)\n            \n            messagebox.showinfo(\n                \"Succ√®s\", \n                \"Plan alimentaire g√©n√©r√© automatiquement !\\nPersonnalisez-le en ajoutant/supprimant des aliments.\"\n            )\n            \n        except Exception as e:\n            print(f\"Erreur g√©n√©ration plan: {e}\")\n            messagebox.showerror(\"Erreur\", f\"Impossible de g√©n√©rer le plan: {e}\")\n    \n    def _display_meal_plan(self, plan):\n        \"\"\"Affiche le plan alimentaire g√©n√©r√©\"\"\"\n        \n        # Nettoyage du contenu existant\n        for widget in self.meal_content_frame.winfo_children():\n            widget.destroy()\n        \n        if not plan or not plan.repas:\n            self._show_welcome_message()\n            return\n        \n        # En-t√™te du plan\n        plan_header = ctk.CTkFrame(self.meal_content_frame, fg_color=\"transparent\")\n        plan_header.pack(fill=\"x\", pady=(0, 20))\n        \n        ctk.CTkLabel(\n            plan_header,\n            text=f\"üìã {plan.nom}\",\n            font=ctk.CTkFont(size=18, weight=\"bold\")\n        ).pack(anchor=\"w\")\n        \n        if plan.description:\n            ctk.CTkLabel(\n                plan_header,\n                text=plan.description,\n                font=ctk.CTkFont(size=12),\n                text_color=(\"gray60\", \"gray40\")\n            ).pack(anchor=\"w\", pady=(2, 0))\n        \n        # Affichage des repas\n        for i, repas in enumerate(plan.repas):\n            self._create_meal_card(repas, i)\n    \n    def _create_meal_card(self, repas, index: int):\n        \"\"\"Cr√©e une carte de repas\"\"\"\n        \n        meal_frame = ctk.CTkFrame(self.meal_content_frame)\n        meal_frame.pack(fill=\"x\", pady=(0, 15))\n        \n        # En-t√™te du repas\n        meal_header = ctk.CTkFrame(meal_frame, fg_color=\"transparent\")\n        meal_header.pack(fill=\"x\", padx=15, pady=(15, 10))\n        meal_header.grid_columnconfigure(0, weight=1)\n        \n        ctk.CTkLabel(\n            meal_header,\n            text=f\"üçΩÔ∏è {repas.nom}\",\n            font=ctk.CTkFont(size=16, weight=\"bold\")\n        ).grid(row=0, column=0, sticky=\"w\")\n        \n        # Actions du repas\n        meal_actions = ctk.CTkFrame(meal_header, fg_color=\"transparent\")\n        meal_actions.grid(row=0, column=1, sticky=\"e\")\n        \n        SecondaryButton(\n            meal_actions,\n            text=\"üìù Modifier\",\n            width=80,\n            height=30,\n            command=lambda: self._edit_meal(repas)\n        ).pack(side=\"right\", padx=(5, 0))\n        \n        # Contenu du repas\n        meal_content = ctk.CTkFrame(meal_frame)\n        meal_content.pack(fill=\"x\", padx=15, pady=(0, 15))\n        \n        if not repas.items:\n            ctk.CTkLabel(\n                meal_content,\n                text=\"Aucun aliment dans ce repas.\\nUtilisez la recherche pour en ajouter !\",\n                justify=\"center\",\n                text_color=(\"gray60\", \"gray50\")\n            ).pack(pady=20)\n        else:\n            # Liste des aliments\n            for item in repas.items:\n                self._create_meal_item(meal_content, item)\n            \n            # Totaux nutritionnels du repas\n            self._create_meal_totals(meal_content, repas)\n    \n    def _create_meal_item(self, parent, item):\n        \"\"\"Cr√©e un √©l√©ment d'aliment dans un repas\"\"\"\n        \n        item_frame = ctk.CTkFrame(parent, fg_color=(\"gray90\", \"gray25\"))\n        item_frame.pack(fill=\"x\", padx=10, pady=3)\n        item_frame.grid_columnconfigure(0, weight=1)\n        \n        # Informations de l'aliment\n        info_frame = ctk.CTkFrame(item_frame, fg_color=\"transparent\")\n        info_frame.grid(row=0, column=0, sticky=\"ew\", padx=10, pady=8)\n        \n        # Nom et quantit√©\n        name_text = f\"{item.nom} - {item.quantite:.0f}g\"\n        ctk.CTkLabel(\n            info_frame,\n            text=name_text,\n            font=ctk.CTkFont(size=12, weight=\"bold\")\n        ).pack(anchor=\"w\")\n        \n        # Informations nutritionnelles de la portion\n        # TODO: Calculer les valeurs r√©elles selon la quantit√©\n        \n        # Bouton de suppression\n        delete_btn = ctk.CTkButton(\n            item_frame,\n            text=\"üóëÔ∏è\",\n            width=30,\n            height=30,\n            font=ctk.CTkFont(size=12),\n            fg_color=\"red\",\n            hover_color=\"dark_red\",\n            command=lambda: self._remove_meal_item(item)\n        )\n        delete_btn.grid(row=0, column=1, padx=(5, 10), pady=8)\n    \n    def _create_meal_totals(self, parent, repas):\n        \"\"\"Cr√©e l'affichage des totaux d'un repas\"\"\"\n        \n        totals_frame = ctk.CTkFrame(parent, fg_color=(\"blue\", \"dark_blue\"))\n        totals_frame.pack(fill=\"x\", padx=10, pady=(10, 5))\n        \n        # TODO: Calculer les vrais totaux du repas\n        total_kcal = sum(item.quantite * 2 for item in repas.items)  # Placeholder\n        \n        ctk.CTkLabel(\n            totals_frame,\n            text=f\"üî• Total: {total_kcal:.0f} kcal | ü•© Prot | üåæ Gluc | üßà Lip\",\n            font=ctk.CTkFont(size=11, weight=\"bold\"),\n            text_color=\"white\"\n        ).pack(padx=10, pady=8)\n    \n    def _open_profile_config(self):\n        \"\"\"Ouvre la configuration du profil nutritionnel\"\"\"\n        \n        # TODO: Cr√©er un modal de configuration de profil complet\n        messagebox.showinfo(\n            \"Configuration du profil\", \n            \"Interface de configuration du profil √† impl√©menter.\\nPour l'instant, utilisez la g√©n√©ration automatique.\"\n        )\n    \n    def _add_food_to_meal(self, aliment: Aliment):\n        \"\"\"Ajoute un aliment au repas actuel\"\"\"\n        \n        if not self.current_plan or not self.current_plan.repas:\n            messagebox.showwarning(\n                \"Plan requis\", \n                \"Veuillez d'abord g√©n√©rer un plan alimentaire.\"\n            )\n            return\n        \n        # TODO: Ouvrir un modal pour choisir la quantit√© et la portion\n        # Pour l'instant, ajout direct avec quantit√© par d√©faut\n        \n        try:\n            # Ajout √† l'item du premier repas (ou repas s√©lectionn√©)\n            repas = self.current_plan.repas[self.selected_meal_index]\n            \n            # Cr√©ation d'un nouvel item (structure simplifi√©e pour la d√©mo)\n            from models.plan_alimentaire import RepasItem\n            \n            nouvel_item = RepasItem(\n                id=len(repas.items) + 1,  # ID temporaire\n                repas_id=repas.id,\n                aliment_id=aliment.id,\n                portion_id=1,  # Portion par d√©faut\n                quantite=100.0  # Quantit√© par d√©faut\n            )\n            \n            # Ajout de propri√©t√©s d'affichage\n            nouvel_item.nom = aliment.nom\n            \n            repas.items.append(nouvel_item)\n            \n            # Mise √† jour de l'affichage\n            self._display_meal_plan(self.current_plan)\n            \n            messagebox.showinfo(\"Succ√®s\", f\"{aliment.nom} ajout√© au repas !\")\n            \n        except Exception as e:\n            print(f\"Erreur ajout aliment: {e}\")\n            messagebox.showerror(\"Erreur\", f\"Impossible d'ajouter l'aliment: {e}\")\n    \n    def _add_suggested_food(self, aliment: Aliment):\n        \"\"\"Ajoute un aliment sugg√©r√©\"\"\"\n        self._add_food_to_meal(aliment)\n    \n    def _edit_meal(self, repas):\n        \"\"\"√âdite un repas\"\"\"\n        messagebox.showinfo(\"√âdition\", f\"√âdition du repas '{repas.nom}' √† impl√©menter.\")\n    \n    def _remove_meal_item(self, item):\n        \"\"\"Supprime un √©l√©ment d'un repas\"\"\"\n        \n        if messagebox.askyesno(\"Confirmation\", f\"Supprimer {item.nom} du repas ?\"):\n            try:\n                # Trouver et supprimer l'item\n                for repas in self.current_plan.repas:\n                    if item in repas.items:\n                        repas.items.remove(item)\n                        break\n                \n                # Mise √† jour de l'affichage\n                self._display_meal_plan(self.current_plan)\n                \n                messagebox.showinfo(\"Succ√®s\", f\"{item.nom} supprim√© du repas.\")\n                \n            except Exception as e:\n                print(f\"Erreur suppression item: {e}\")\n                messagebox.showerror(\"Erreur\", f\"Impossible de supprimer l'item: {e}\")\n    \n    def _analyze_current_plan(self):\n        \"\"\"Analyse le plan alimentaire actuel\"\"\"\n        \n        if not self.current_plan:\n            messagebox.showwarning(\"Plan requis\", \"Aucun plan √† analyser.\")\n            return\n        \n        try:\n            analyse = self.meal_generator.analyser_plan_nutritionnel(self.current_plan)\n            \n            # Affichage des r√©sultats d'analyse\n            result_text = f\"\"\"üìä ANALYSE NUTRITIONNELLE\n\nüî• Calories totales: {analyse['totaux']['kcal']:.0f} kcal\nü•© Prot√©ines: {analyse['totaux']['proteines_g']:.1f}g ({analyse['ratios_macros'].get('proteines_pourcent', 0):.1f}%)\nüåæ Glucides: {analyse['totaux']['glucides_g']:.1f}g ({analyse['ratios_macros'].get('glucides_pourcent', 0):.1f}%)\nüßà Lipides: {analyse['totaux']['lipides_g']:.1f}g ({analyse['ratios_macros'].get('lipides_pourcent', 0):.1f}%)\nüåø Fibres: {analyse['totaux']['fibres_g']:.1f}g\n\n‚≠ê Score d'√©quilibre: {analyse['score_equilibre']}/100\nüçΩÔ∏è Nombre de repas: {analyse['nombre_repas']}\"\"\"\n            \n            messagebox.showinfo(\"Analyse du plan\", result_text)\n            \n        except Exception as e:\n            print(f\"Erreur analyse: {e}\")\n            messagebox.showerror(\"Erreur\", f\"Impossible d'analyser le plan: {e}\")\n    \n    def _optimize_current_plan(self):\n        \"\"\"Optimise le plan alimentaire actuel\"\"\"\n        \n        if not self.current_plan:\n            messagebox.showwarning(\"Plan requis\", \"Aucun plan √† optimiser.\")\n            return\n        \n        messagebox.showinfo(\n            \"Optimisation\", \n            \"Fonctionnalit√© d'optimisation automatique √† impl√©menter.\\nUtilisez l'analyse pour identifier les am√©liorations manuelles.\"\n        )\n    \n    def _export_plan_pdf(self):\n        \"\"\"Exporte le plan en PDF\"\"\"\n        \n        if not self.current_plan:\n            messagebox.showwarning(\"Plan requis\", \"Aucun plan √† exporter.\")\n            return\n        \n        messagebox.showinfo(\n            \"Export PDF\", \n            \"Fonctionnalit√© d'export PDF √† impl√©menter.\\nLe plan sera export√© avec analyse nutritionnelle compl√®te.\"\n        )\n\n\nif __name__ == \"__main__\":\n    # Test de l'interface\n    app = ctk.CTk()\n    app.title(\"Test - Nutrition Moderne\")\n    app.geometry(\"1400x900\")\n    \n    page = ModernNutritionPage(app, client_id=1)\n    page.pack(fill=\"both\", expand=True)\n    \n    app.mainloop()